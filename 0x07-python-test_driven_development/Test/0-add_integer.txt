The ``add_integer`` module
==========================

Using ``add_integer``
-------------

Write a function that adds 2 integers

	Prototype: def add_integer(a, b=98):
	a and b must be integers or floats, otherwise raise a TypeError exception with the message a must be an integer or b must be an integer
	a and b must be first casted to integers if they are float
	Returns an integer: the addition of a and b
	You are not allowed to import any module

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(3, 6)
9

>>> add_integer(3.5, 6)
9

>>> add_integer(3, 6.5)
9

>>> add_integer(3.5, 6.5)
9

>>> add_integer("3", 5)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(3, "5")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("3", "5")
Traceback (most recent call last):
TypeError: a must be an integer

>>> a = float("inf")
>>> b = 10
>>> add_integer(a, b)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(6, "bye")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("city", 5)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2.3, None)
Traceback (most recent call last):
TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message
is only printed for the first argument

>>> add_integer("dime", "dozen")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(2, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
